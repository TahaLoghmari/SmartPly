name: Deploy to Azure Container Apps

on:
  workflow_dispatch:
  push:
    branches: [master]

env:
  AZURE_CONTAINER_REGISTRY: smartplyapi
  CONTAINER_APP_NAME: smartply-api
  RESOURCE_GROUP: personal-projects

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to ACR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io
          username: ${{ secrets.AZURE_REGISTRY_USERNAME }}
          password: ${{ secrets.AZURE_REGISTRY_PASSWORD }}

      - name: Build and push container image to ACR
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_APP_NAME }}:${{ github.sha }}
          file: backend/Dockerfile

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy and configure Azure Container App
        run: |
          az containerapp update \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --environment <YOUR_ENVIRONMENT_NAME> \
            --image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_APP_NAME }}:${{ github.sha }} \
            --ingress external \
            --target-port 8080 \
            --set-env-vars ASPNETCORE_ENVIRONMENT=Production \
            --set-env-vars ConnectionStrings__DefaultConnection='${{ secrets.DEFAULT_CONNECTION }}' \
            --set-env-vars Jwt__Key='${{ secrets.JWT_KEY }}' \
            --set-env-vars Jwt__Issuer='${{ secrets.JWT_ISSUER }}' \
            --set-env-vars Jwt__Audience='${{ secrets.JWT_AUDIENCE }}' \
            --set-env-vars Jwt__ExpirationInMinutes=15 \
            --set-env-vars Jwt__RefreshTokenExpirationDays=30 \
            --set-env-vars Google__ClientId='${{ secrets.GOOGLE_CLIENT_ID }}' \
            --set-env-vars Google__ClientSecret='${{ secrets.GOOGLE_CLIENT_SECRET }}' \
            --set-env-vars Google__RedirectUri='${{ secrets.GOOGLE_REDIRECT_URI }}' \
            --set-env-vars Google__Scopes='openid email profile https://www.googleapis.com/auth/gmail.readonly' \
            --set-env-vars EmailSettings__MailServer=smtp.gmail.com \
            --set-env-vars EmailSettings__MailPort=587 \
            --set-env-vars EmailSettings__SenderName=SmartPly \
            --set-env-vars EmailSettings__FromEmail=medtahalog@gmail.com \
            --set-env-vars EmailSettings__Password='${{ secrets.EMAIL_SETTINGS_PASSWORD }}' \
            --set-env-vars Frontend__BaseUrl='${{ secrets.FRONTEND_URL }}' \
            --set-env-vars Supabase__ServiceRoleKey='${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}' \
            --set-env-vars Supabase__Url='${{ secrets.SUPABASE_URL }}' \
            --set-env-vars Gemini__Credentials__ApiKey='${{ secrets.GEMINI_CREDENTIALS_API_KEY }}' \
            --set-env-vars Gemini__Model=gemini-2.5-flash \
            --set probes='[
              {
                "type": "liveness",
                "httpGet": { "path": "/health", "port": 8080 },
                "intervalSeconds": 10,
                "timeoutSeconds": 5,
                "failureThreshold": 3
              },
              {
                "type": "readiness",
                "httpGet": { "path": "/health", "port": 8080 },
                "intervalSeconds": 10,
                "timeoutSeconds": 5,
                "failureThreshold": 3
              }
            ]'
